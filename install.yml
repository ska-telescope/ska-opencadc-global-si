---
- hosts: localhost
  vars:
  - BASE_DIR: "/home/ubuntu"
  - CONFIG_FOLDER: "{{BASE_DIR}}/config"
  - LOGS_FOLDER: "{{BASE_DIR}}/logs"
  # SSL certificates 'server-cert.pem' (server's public+private SSL keys)
  # needs to be in 'certificates', servers cacerts in subdir 'cacerts' (e.g. fullchain.pem
  # from letsencrypt
  - CERTIFICATES_FOLDER: "{{BASE_DIR}}/certificates/cacerts"  
  - GIT_REPO: "https://gitlab.com/fkirsten/global-si"
  - GIT_VERSION: main
  - SI_REPO_PATH: "images.opencadc.org/storage-inventory"
  - CORE_REPO_PATH: "images.opencadc.org/core"
  - BALDUR_VERSION: 0.3.0
  - RAVEN_VERSION: 0.7.0
  - RATIK_VERSION: 0.1.2
  - FENWICK_VERSION: 0.5.2
  - LUSKAN_VERSION: 0.6.0
  - REG_VERSION: 1.0.1
  - POSTGRESQL_IMAGE: "swsrc/cadc-postgresql-12-dev"
  - HAPROXY_IMAGE: "amigahub/cadc-haproxy"
  - WAIT_SECONDS: 7
  - WAIT_SECONDS_LONG: 10
  - HAPROXY_EXPOSED_PORT: 443
  
  tasks:

  - name: Install dependencies python-crypto python3-pi
    become: yes
    ansible.builtin.apt:
      pkg:
        - python-crypto
        - python3-pip
      state: present
      
  - name: Install Python bcoz docker SDK
    package:
            name: "python3"
            state: present
  - name: Check docker sdk installed or not
    command: "pip3 list | grep docker"
    register: docker_sdk

  - name: Install Docker Module for Python
    become: yes
    pip:
      name: docker

  - name: creating {{CONFIG_FOLDER}}
    become: yes
    ansible.builtin.file:
      path: "{{CONFIG_FOLDER}}"
      state: directory
      mode: 0775

  - name: creating {{CERTIFICATES_FOLDER}}
    become: yes
    ansible.builtin.file:
      path: "{{CERTIFICATES_FOLDER}}"
      state: directory
      mode: 0775

  - name: creating {{LOGS_FOLDER}}
    become: yes
    ansible.builtin.file:
      path: "{{LOGS_FOLDER}}"
      state: directory
      mode: 0775

  - name: Clone repo with configs
    become: yes
    ansible.builtin.git:
      repo: "{{GIT_REPO}}"
      dest:  "{{CONFIG_FOLDER}}"
      version: "{{GIT_VERSION}}"
    ignore_errors: True

  - name: Pull {{POSTGRESQL_IMAGE}}
    become: yes
    docker_image:
      name: "{{POSTGRESQL_IMAGE}}"
      source: pull

  - name: Pull {{HAPROXY_IMAGE}}
    become: yes
    docker_image:
      name: "{{HAPROXY_IMAGE}}"
      source: pull

  - name: Pull baldur:{{BALDUR_VERSION}}
    become: yes
    docker_image:
      name: "{{SI_REPO_PATH}}/baldur:{{BALDUR_VERSION}}"
      source: pull

  - name: Pull reg:{{REG_VERSION}}
    become: yes
    docker_image:
      name: "{{CORE_REPO_PATH}}/reg:{{REG_VERSION}}"
      source: pull

  - name: Pull raven:{{RAVEN_VERSION}}
    become: yes
    docker_image:
      name: "{{SI_REPO_PATH}}/raven:{{RAVEN_VERSION}}"
      source: pull

  - name: Pull ratik:{{RATIK_VERSION}}
    become: yes
    docker_image:
      name: "{{SI_REPO_PATH}}/ratik:{{RATIK_VERSION}}"
      source: pull

  - name: Pull fenwick:{{FENWICK_VERSION}}
    become: yes
    docker_image:
      name: "{{SI_REPO_PATH}}/fenwick:{{FENWICK_VERSION}}"
      source: pull

  - name: Pull luskan:{{LUSKAN_VERSION}}
    become: yes
    docker_image:
      name: "{{SI_REPO_PATH}}/luskan:{{LUSKAN_VERSION}}"
      source: pull

  - name: Launch {{POSTGRESQL_IMAGE}}:latest
    become: yes
    docker_container:
      name: pg12db
      image: "{{POSTGRESQL_IMAGE}}:latest"
      ports:
        - "5432:5432"
      volumes:
        - "{{CONFIG_FOLDER}}/global-si/config/postgresql:/config:ro"
        - "{{CONFIG_FOLDER}}/global-si/logs/postgresql:/logs:rw"
      state: started
  - name: pause for postgresl
    ansible.builtin.pause:
      seconds: "{{ WAIT_SECONDS_LONG | int }}"

  - name: Launch registry
    become: yes
    docker_container:
      name: reg
      image: "{{SI_REPO_PATH}}/reg:{{REG_VERSION}}"
      user: "tomcat:tomcat"
      volumes:
        - "{{CONFIG_FOLDER}}/config/reg:/config:ro"
      state: started

  - name: pause for wait to reg
    ansible.builtin.pause:
      seconds: "{{ WAIT_SECONDS | int }}"

  - name: Launch baldur
    become: yes
    docker_container:
      name: baldur
      image: "{{SI_REPO_PATH}}/baldur:{{BALDUR_VERSION}}"
      user: "tomcat:tomcat"
      links:
        - "pg12db:pg12db"
      volumes:
        - "{{CONFIG_FOLDER}}/global-si/config/baldur:/config:ro"
      state: started

  - name: pause for wait to baldur
    ansible.builtin.pause:
      seconds: "{{ WAIT_SECONDS | int }}"

  - name: Launch raven
    become: yes
    docker_container:
      name: raven
      image: "{{SI_REPO_PATH}}/raven:{{RAVEN_VERSION}}"
      user: "tomcat:tomcat"
      links:
        - "pg12db:pg12db"
      volumes:
        - "{{CONFIG_FOLDER}}/global-si/config/raven:/config:ro"
      state: started

  - name: pause for wait to raven
    ansible.builtin.pause:
      seconds: "{{ WAIT_SECONDS | int }}"

  - name: Launch ratik
    become: yes
    docker_container:
      name: ratik
      image: "{{SI_REPO_PATH}}/ratik:{{RATIK_VERSION}}"
      user: "opencadc:opencadc"
      links:
        - "pg12db:pg12db"
      volumes:
        - "{{CONFIG_FOLDER}}/global-si/config/ratik:/config:ro"
      state: started

  - name: pause for wait to ratik
    ansible.builtin.pause:
      seconds: "{{ WAIT_SECONDS | int }}"

  - name: Launch fenwick
    become: yes
    docker_container:
      name: fenwick
      image: "{{SI_REPO_PATH}}/fenwick:{{FENWICK_VERSION}}"
      user: "opencadc:opencadc"
      links:
        - "pg12db:pg12db"
      volumes:
        - "{{CONFIG_FOLDER}}/global-si/config/fenwick:/config:ro"
      state: started

  - name: pause for wait to fenwick
    ansible.builtin.pause:
      seconds: "{{ WAIT_SECONDS | int }}"

  - name: Launch luskan
    become: yes
    docker_container:
      name: luskan
      image: "{{SI_REPO_PATH}}/luskan:{{LUSKAN_VERSION}}"
      user: "tomcat:tomcat"
      links:
        - "pg12db:pg12db"
      volumes:
        - "{{CONFIG_FOLDER}}/global-si/config/luskan:/config:ro"
      state: started

  - name: pause for wait to luskan
    ansible.builtin.pause:
      seconds: "{{ WAIT_SECONDS | int }}"

  - name: Launch {{HAPROXY_IMAGE}}
    become: yes
    docker_container:
      name: haproxy
      image: "{{HAPROXY_IMAGE}}:latest"
      ports:
        - "443:443"
      volumes:
        - "{{CONFIG_FOLDER}}/global-si/logs/haproxy:/logs:rw"
        - "{{CONFIG_FOLDER}}/global-si/certs:/config:ro"
        - "{{CONFIG_FOLDER}}/global-si/config/haproxy:/usr/local/etc/haproxy/:rw"
      links:
        - "reg:reg"
        - "luskan:luskan"
	- "baldur:baldur"
        - "raven:raven"
      state: started

